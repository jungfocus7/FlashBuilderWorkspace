"use strict";const _mu_com={trace:tv=>{console.log("   ",tv)}};Object.freeze(_mu_com);const _mu_num={is_float:tv=>tv%1!=0,is_minus:tv=>tv<0,random:tv=>Math.round(Math.random()*(tv-1)),randRange:(min,max)=>min+Math.round(Math.random()*(max-min)),is_odd:tv=>tv%2>0,is_even:tv=>tv%2==0};Object.freeze(_mu_num);const _mu_arr={is_arr:tarr=>Array.isArray(tarr)&&tarr.length>0,is_contains:(tarr,te)=>{if(!_mu_arr.is_arr(tarr))return!1;let tb=!1;const tl=tarr.length;for(let i=0;i<tl;i++)if(tarr[i]===te){tb=!0;break}return tb},shuffle:tarr=>{if(!_mu_arr.is_arr(tarr))return;const tl=tarr.length;for(let i=0;i<tl;i++){let te=tarr[i],ti=_mu_num.randRange(0,tl-1);tarr[i]=tarr[ti],tarr[ti]=te}},copy:tarr=>_mu_arr.is_arr(tarr)?tarr.slice():null,get_at:(tarr,ti)=>{if(!_mu_arr.is_arr(tarr))return null;let tl=tarr.length;return ti<0&&(ti=tl+ti),ti>=0&&ti<tl?tarr[ti]:null}};Object.freeze(_mu_num),module.exports={_mu_com:_mu_com,_mu_num:_mu_num,_mu_arr:_mu_arr};